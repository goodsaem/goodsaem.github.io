(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{1096:function(t,s,n){"use strict";n.r(s);var e=n(122),i=Object(e.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"_5-spring-boot-에-apache-ignite-설정"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-spring-boot-에-apache-ignite-설정"}},[t._v("#")]),t._v(" "),e("i",{staticClass:"fas fa-server"}),t._v(" 5. spring boot 에 apache ignite 설정")]),t._v(" "),e("p",[t._v("프로젝트를 진행하다 보면 캐쉬를 사용해야 하는 경우가 있습니다. 실시간으로 변하는 dash board를 구축해달라고 할때 전 주로 캐쉬를 이용해서 문제를\n해결합니다. 대쉬보드를 사용하는 사용자가 천명 이라고 가정하고 대시보드는 5초마다 한번씩 변경되어 되고 한번에 불러오는 데이터량은 1만건 정도 된다고\n가정하겠습니다. 이걸 그냥 query 날려서 데이터를 가져온다고 가정하면 10,000 * 1,000 = 10,000,000 5초마다 천만건의 데이터를 가져오게 되는\n거죠 db에도 부하가 많이가고 응답속도도 느려지고 메모리가 꽉 차서 코아 덤프떨어지고 서비스는 100% 중단됩니다. 이럴때 캐쉬를 사용하면 좋은데요\nredis는 참 좋은데 설치를 해야 되는 문제가 있습니다. unix에서는 설치도 안되고 패쇄망에 있는 리눅스에서 설치도 쉬운 문제가 아니죠..\n이때 ignite를 이용하면 쉽게 문제를 풀수 있습니다.")]),t._v(" "),e("h2",{attrs:{id:"_1-아키텍처-springboot-ignite-spring-scheduler"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-아키텍처-springboot-ignite-spring-scheduler"}},[t._v("#")]),t._v(" 1. 아키텍처 (springboot , ignite , spring scheduler)")]),t._v(" "),e("p",[t._v("구상하고 있는 구조는 아래와 같습니다. 스프링 스케쥴러를 이용하여 5초마다 한번씩 디비에 데이터를 읽어서 ignite 캐쉬에 json 형태로 데이터를\n담아 놓습니다. 1,000 명의 사용자가 5초마다 데이터를 요청하더라도 이미 가져온 캐쉬의 json 데이터를 가져와서 보여주기에 5초당 1만건 데이터를\n불러오는 부하만 걸리게 됩니다. 부하가 1/1000 로 줄었습니다.")]),t._v(" "),e("p",[e("img",{attrs:{src:n(872),alt:"img"}})]),t._v(" "),e("p",[e("em",[e("strong",[t._v("작성중")])]),t._v(" 생각보다 잘 안되네요 ^^")])])}),[],!1,null,null,null);s.default=i.exports},872:function(t,s,n){t.exports=n.p+"assets/img/1.10c5c095.jpg"}}]);